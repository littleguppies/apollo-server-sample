# type User {
#   id: ID! @id
#   user_name: String!
#   email: String! @unique
#   password: String!
#   post: [Post!] @relation(name: "UserOwnPost", onDelete: CASCADE)
#   stories: [Story!] @relation(name: "WrittenStories")
#   likedStories: [Story!] @relation(name: "LikedStories")
#   isOnline: Boolean @default(value: false)
# }
# type Post {
#   id: ID! @id
#   title: String
#   owner: User! @relation(name: "UserOwnPost", onDelete: SET_NULL)
#   skill: [Skill!] @relation(name: "PostHaveSkill", onDelete: SET_NULL)
# }

# type Skill {
#   id: ID! @id
#   name: String!
#   post: [Post!] @relation(name: "PostHaveSkill", onDelete: SET_NULL)
# }

# type Story {
#   id: ID! @id
#   text: String!
#   author: User! @relation(name: "WrittenStories")
#   likedBy: [User!] @relation(name: "LikedStories")
# }

# type Conversation {
#   id: ID! @id
#   content: String
#   paticipants: [User!]
# }

# enum Permission {
#   FREELANCER
#   EMPLOYER
#   ADMIN
# }

# enum ProposalStatus {
#   ACCEPT
#   REJECT
#   PENDING
# }
# enum ConversationType {
#   PROPOSAL
#   INTERVIEW
#   OFFER
#   TASK
# }

# type User {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   urlAvatar: String
#   isOnline: Boolean @default(value: false)
#   lastTimeOnl: DateTime
#   freelancer: Freelancer @relation(link: TABLE)
#   employer: Employer @relation(link: TABLE)
#   fullName: String
#   email: String @unique
#   userName: String @unique
#   password: String
#   resetToken: String
#   resetTokenExpiry: Float
#   permissions: [Permission] @scalarList(strategy: RELATION)
#   conversations: [Conversation!]!
#   active: Boolean @default(value: false)
#   tags: [String!] @scalarList(strategy: RELATION)
# }

# type Notification {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   body: NotificationBody!
#     @relation(link: TABLE, name: "NotificationHasBody", onDelete: CASCADE)
#   seen: Boolean! @default(value: false)
#   deliver: Deliver!
#     @relation(link: TABLE, name: "NotificationHasDeliver", onDelete: CASCADE)
# }

# type NotificationBody {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   content: String
#   notification: Notification
#     @relation(name: "NotificationHasBody", onDelete: SET_NULL)
# }

# type Deliver {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   from: User! @relation(name: "NotificationFromUser")
#   to: User! @relation(name: "NotificationToUser")
#   notification: Notification
#     @relation(name: "NotificationHasDeliver", onDelete: SET_NULL)
# }

# enum AttachmentType {
#   IMAGE
#   AUDIO
#   VIDEO
#   TEXT
# }

# type Attachment {
#   id: ID! @id
#   createdAt: DateTime!
#   updatedAt: DateTime @updatedAt
#   type: String
#   author_name: String
#   title: String
#   title_link: String
#   image_url: String
#   asset_url: String!
#   thumb_url: String
#   extention: String
#   author: User
# }

# type Conversation {
#   id: ID! @id
#   createdAt: DateTime!
#   updatedAt: DateTime @updatedAt
#   name: String!
#   isGroup: Boolean @default(value: false)
#   texts: [Text!]!
#   participants: [User!]!
# }

# enum MessageType {
#   TEXT
#   FILE
# }
# type Text {
#   id: ID! @id
#   createdAt: DateTime!
#   updatedAt: DateTime @updatedAt
#   type: MessageType
#   text: String
#   attachments: [Attachment]
#   author: User!
#   conversation: Conversation!
# }

# type Freelancer {
#   id: ID! @id
#   user: User
#   type: String @defualt(value: "single")
#   status: String
#   isDeleted: Boolean
#   jobTitle: String @default(value: "")
#   completeProfiles: Int @default(value: 0)
#   rank: Int @default(value: 0)
#   hoursRate: Int @default(value: 0)
#   aboutFreelancer: String @default(value: "")
#   availability: Int @default(value: 0)
#   phoneNumber: Int @default(value: 0)
#   expYears: Int @default(value: 0)
#   skills: [Skill]
#   education: [Education]
#   location: String @default(value: "")
#   languageSkills: [LanguageSkill]
#   experiences: [Experience]
#   portfolio: [Portfolio]
#   certification: [Certification]
#   publications: [Publication]
#   tags: [String!] @scalarList(strategy: RELATION)
#   isInvitedToProposal: Boolean @defualt(value: false)
#   isShortlist: Boolean @defualt(value: false)
#   isArchived: Boolean @defualt(value: false)
# }

# type Skill {
#   id: ID! @id
#   freelancer: [Freelancer]
#   nameSkill: String @default(value: "")
#   expYears: Int @default(value: 0)
# }

# type Education {
#   id: ID! @id
#   freelancer: Freelancer
#   degree: String @default(value: "")
#   schoolName: String @default(value: "")
#   yearFinal: String @default(value: "")
#   yearStart: String @default(value: "")
# }

# type LanguageSkill {
#   id: ID! @id
#   freelancer: Freelancer
#   language: String @default(value: "")
#   level: String @default(value: "")
# }
# type Experience {
#   id: ID! @id
#   freelancer: Freelancer
#   description: String @default(value: "")
#   location: String @default(value: "")
#   timeEnd: String @default(value: "")
#   timeStart: String @default(value: "")
#   tittle: String @default(value: "")
# }

# type Portfolio {
#   id: ID! @id
#   freelancer: Freelancer
#   description: String @default(value: "")
#   imageUrl: String @default(value: "")
#   title: String @default(value: "")
# }

# type Certification {
#   id: ID! @id
#   freelancer: Freelancer
#   organization: String @default(value: "")
#   title: String @default(value: "")
#   year: String @default(value: "")
# }
# type Publication {
#   id: ID! @id
#   freelancer: Freelancer
#   authors: String @default(value: "")
#   description: String @default(value: "")
#   publisher: String @default(value: "")
#   title: String @default(value: "")
#   url: String @default(value: "")
#   year: String @default(value: "")
# }

# type Employer {
#   id: ID! @id
#   user: User
#   job: [Job]
#   status: String
#   isDeleted: Boolean
#   company: Company @relation(link: INLINE)
#   contact: Contact @relation(link: INLINE)
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   tags: [String!] @scalarList(strategy: RELATION)
# }

# type Company {
#   id: ID! @id
#   employer: Employer
#   description: String @default(value: "")
#   name: String @default(value: "")
#   website: String @default(value: "")
# }

# type Contact {
#   id: ID! @id
#   employer: Employer
#   country: String @default(value: "")
#   owner: String @default(value: "")
#   phone: String @default(value: "")
#   timeZone: String @default(value: "")
#   address: String
# }

# type Job {
#   id: ID! @id
#   employer: Employer
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   title: String
#   category: String
#   description: String
#   attachments: [Attachment]
#   type: String @default(value: "")
#   budget: Int
#   location: String @default(value: "")
#   visibility: Boolean @default(value: true)
#   payingType: String @default(value: "")
#   duration: String @default(value: "")
#   skills: [NeedSkill]
#   isDeleted: Boolean @default(value: false)
#   active: Boolean @default(value: true)
#   tags: [String!] @scalarList(strategy: RELATION)
#   isSendProposal: Boolean @defualt(value: false)
#   isWatched: Boolean @defualt(value: false)
# }

# type NeedSkill {
#   id: ID! @id
#   job: [Job]
#   name: String
# }

# # This is deprecated
# type employerInvitedFreelancer {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer
#   job: Job
#   message: String
#   # isInvited: Boolean @default(value: false)
#   # isSaved: Boolean @default(value: false)
#   # isDeleted: Boolean @default(value: false)
# }

# enum ProposalType {
#   PROPOSAL
#   INVITED
# }

# type Proposal {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer
#   coverLetter: String @default(value: "")
#   attachments: [Attachment]
#   job: Job
#   proposalStatus: ProposalStatus @default(value: PENDING)
#   active: Boolean @default(value: true)
#   isOffer: Boolean @default(value: false)
#   isArchived: Boolean @default(value: false)
#   isShortlist: Boolean @default(value: false)
#   type: ProposalType @default(value: PROPOSAL) # This is label for proposal
#   isInvited: Boolean @defualt(value: false)
# }

# type InviteToProposal {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   employer: Employer!
#   job: Job!
#   freelancer: Freelancer!
#   isSendProposal: Boolean @defualt(value: false)
# }

# type EmployerShortList {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer
#   job: Job
#   employer: Employer
#   isOffer: Boolean @default(value: false)
#   isArchived: Boolean @default(value: false)
# }

# type FreelancerShortList {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer
#   job: Job
#   status: FreelancerShortListStatus @default(value: ACTIVE)
#   isProposal: Boolean @default(value: false)
# }

# type Hire {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   offer: Offer!
#     @relation(name: "OfferHasHired", link: TABLE, onDelete: SET_NULL)
#   status: HIRE_STATUS!
#   job: Job
#   # freelancer: Freelancer!
#   # employer: Employer!
# }

# # The type Project no longer used
# type Project {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   title: String!
#   job: Job!
#   list: [ListOfProject!]
#   status: PROJECT_STATUS!
# }

# # The type ListOfProject no longer used
# type ListOfProject {
#   id: ID! @id
#   project: Project!
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   title: String!
#   task: [Task!]
# }
# enum PaymentTypeForTask {
#   HOUR
#   FIXED
# }
# enum TaskStatus {
#   ACTIVE
#   COMPLETED
#   ARCHIVED
# }

# type PaymentForTask {
#   id: ID! @id
#   type: PaymentTypeForTask
#   budget: Float
# }

# type Task {
#   id: ID! @id
#   job: Job!
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   title: String!
#   description: String!
#   assign: [Assign!] @relation(name: "TaskHasAssign", onDelete: CASCADE)
#   attachments: [Attachment]
#     @relation(name: "TaskHasAttachment", onDelete: CASCADE)
#   dueDate: [String] @scalarList(strategy: RELATION)
#   billing: PaymentForTask!
#   screenShot: Boolean @defualt(value: false)
#   trackingTime: Boolean @defualt(value: false)
#   status: TaskStatus @defualt(value: ACTIVE)
#   acceptWorking: Boolean @default(value: false)
#   acceptComplete: Boolean @default(value: false)
#   report: [Report!] @relation(name: "TaskHasReports", onDelete: CASCADE)
# }

# type Assign {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   task: Task! @relation(name: "TaskHasAssign", onDelete: SET_NULL)
#   freelancer: Freelancer!
#   totalTime: Int! @default(value: 0)
# }

# type Report {
#   id: ID! @id
#   title: String
#   task: Task @relation(name: "TaskHasReports", onDelete: SET_NULL)
# }

# type Interview
#   @indexes(
#     value: [
#       {
#         fields: ["job", "freelancer"]
#         name: "interview_freelancer_idx"
#         unique: true
#       }
#     ]
#   ) {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer @relation(strategy: EMBED)
#   job: Job @relation(strategy: EMBED)
#   conversation: Conversation
#   active: Boolean @default(value: true)
# }

# type Offer {
#   id: ID! @id
#   createdAt: DateTime @createdAt
#   updatedAt: DateTime @updatedAt
#   freelancer: Freelancer!
#   job: Job!
#   status: StatusOffer @default(value: PENDING)
#   contactTitle: String @default(value: "")
#   startDay: String
#   workDescription: String @default(value: "")
#   paymentType: paymentTypeOffer
#     @relation(name: "OfferHasPaymentType", onDelete: CASCADE)
#   proposal: Proposal
#   hire: Hire @relation(name: "OfferHasHired", onDelete: CASCADE)
# }

# type paymentTypeOffer {
#   id: ID! @id
#   type: String
#   budget: Float
# }

# type Category {
#   id: ID! @id
#   name: String
#   skills: [Skill]
# }

# type Wallet {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   user: User!
#   balance: Int! @defualt(value: 0)
#   transactions: [Transaction!]
# }

# type Transaction {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   user: User!
#   type: TransactionType!
#   amount: Int!
#   description: String
#   customer: String!
#   currency: String! @default(value: "usd")
#   fee: Int
#   net: Int
#   status: String!
#   source: Source!
#   token: String!
#   charge: String!
# }

# type Source {
#   id: ID! @id
#   createdAt: DateTime! @createdAt
#   updatedAt: DateTime! @updatedAt
#   country: String!
#   expMonth: Int!
#   expYear: Int!
#   brand: String!
#   last4: String!
# }

# enum TransactionType {
#   CHARGE
#   PAYOUT
# }
# enum StatusOffer {
#   PENDING
#   SENT
#   DRAFT
#   DELETED
#   ACCEPTED
#   REJECTED
# }
# enum FreelancerShortListStatus {
#   ACTIVE
#   ARCHIVE
# }
# enum HIRE_STATUS {
#   HIRING
#   PAUSED
#   STOPED
# }

# # The type TASK_STATUS no longer used
# enum TASK_STATUS {
#   PENDING
#   APPROVE
#   DISAPPROVE
# }

# # The type PROJECT_STATUS no longer used
# enum PROJECT_STATUS {
#   OPEN
#   CLOSED
# }

# type Test {
#   id: ID! @id
#   message: String
# }
# type test3 {
#   id: ID! @id
# }

type User {
  id: ID! @id
  createdAt: DateTime! @createdAt
  updatedAt: DateTime! @updatedAt
  handle: String! @unique
  name: String
  tweets: [Tweet!]!
}

type Tweet {
  id: ID! @id
  createdAt: DateTime! @createdAt
  text: String!
  owner: User!
  location: Location!
}

type Location {
  id: ID! @id
  latitude: Float!
  longitude: Float!
}
